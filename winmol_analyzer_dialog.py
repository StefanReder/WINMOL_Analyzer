# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WINMOLAnalyzer
Dialog
                                 A QGIS plugin
 Plugin to detect stems from UAV
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-29
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Hochschule f√ºr nachhaltige Entwicklung Eberswalde | mundialis GmbH & Co. KG | terrestris GmbH & Co. KG
        email                : Stefan.Reder@hnee.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys

from tensorflow import keras

#from utils import IO
from utils import Prediction as Pred

from qgis.core import QgsProject, QgsVectorLayer
from qgis.PyQt import QtWidgets, uic
from shapely import LineString, Point

# Set up current path.
current_path = os.path.dirname(__file__)
sys.path.append(os.path.abspath(current_path + 'classes'))
sys.path.append(os.path.abspath(current_path + 'utils'))
sys.path.append(os.path.abspath(current_path + 'qgisutil'))
sys.path.append(os.path.abspath(os.path.dirname(__file__)))

from classes.Stem import Stem
from classes.Config import Config
from qgisutil.FeatureFactory import FeatureFactory

from PyQt5.QtWidgets import QFileDialog


# This loads your .ui file so that PyQt can populate your plugin with the
# elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(current_path, 'winmol_analyzer_dialog_base.ui')
)


class WINMOLAnalyzerDialog(QtWidgets.QDialog, FORM_CLASS):
    ff: FeatureFactory

    def __init__(self, parent=None):
        """Constructor."""
        super(WINMOLAnalyzerDialog, self).__init__(parent)
        self.setupUi(self)

        self.ff = FeatureFactory()

        # parameters
        self.img_path = None
        self.model_path = None
        self.stem_dir = None
        self.trees_dir = None
        self.nodes_dir = None

        # Create a Config instance
        self.config = Config()

        self.set_connections()

    def set_connections(self):
        self.run_button.clicked.connect(self.run_process)
        self.model_comboBox.currentIndexChanged.connect(
            self.handleModelComboBoxChange)
        self.set_parameters()
        self.set_default_config_parameters()
        self.get_config_parameters_from_gui()
        self.uav_toolButton.clicked.connect(self.uav_file_dialog)
        self.output_toolButton_stem.clicked.connect(self.stem_file_dialog)

    def handleModelComboBoxChange(self, index):
        selected_text = self.model_comboBox.currentText()
        if selected_text == "Custom":
            self.tileside_label.setEnabled(True)
            self.image_spinBox.setEnabled(True)
            self.model_lineEdit.setEnabled(True)
            self.model_toolButton.setEnabled(True)
            self.segm_label.setEnabled(True)
            self.tileside_doubleSpinBox.setEnabled(True)
            self.tileside_unit_label.setEnabled(True)
            self.image_label.setEnabled(True)
            self.image_spinBox.setEnabled(True)
            self.image_unit_label.setEnabled(True)
        else:
            self.tileside_label.setEnabled(False)
            self.image_spinBox.setEnabled(False)
            self.model_lineEdit.setEnabled(False)
            self.model_toolButton.setEnabled(False)
            self.segm_label.setEnabled(False)
            self.tileside_doubleSpinBox.setEnabled(False)
            self.tileside_unit_label.setEnabled(False)
            self.image_label.setEnabled(False)
            self.image_spinBox.setEnabled(False)
            self.image_unit_label.setEnabled(False)

    def set_parameters(self):
        # Extract command-line arguments
        self.img_path = self.uav_lineEdit.text()
        self.model_path = self.model_lineEdit.text()
        self.stem_dir = self.output_lineEdit_stem.text()
        self.trees_dir = self.output_lineEdit_trees.text()
        self.nodes_dir = self.output_lineEdit_nodes.text()

    def set_default_config_parameters(self):
        # set default values
        self.minlength_doubleSpinBox.setValue(self.config.min_length)
        self.maxdistance_doubleSpinBox.setValue(self.config.max_distance)
        self.tolerance_doubleSpinBox.setValue(self.config.tolerance_angle)
        self.maxtree_doubleSpinBox.setValue(self.config.max_tree_height)

    def get_config_parameters_from_gui(self):
        self.config.min_length = self.minlength_doubleSpinBox.value()
        self.config.max_distance = self.maxdistance_doubleSpinBox.value()
        self.config.tolerance_angle = self.tolerance_doubleSpinBox.value()
        self.config.max_tree_height = self.maxtree_doubleSpinBox.value()

    def uav_file_dialog(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "Select TIFF File", "", "TIFF Files (*.tiff *.tif);;All Files (*)", options=options)
        if file_path:
            self.uav_lineEdit.setText(file_path)

    def stem_file_dialog(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "Select TIFF File", "", "TIFF Files (*.tiff *.tif);;All Files (*)", options=options)
        if file_path:
            self.output_lineEdit_stem.setText(file_path)

    def run_process(self):
        # Load the model from the HDF5 file
        model = keras.models.load_model(self.model_path, compile=False)

        # Display a summary of the loaded model architecture
        model.summary()

        # Load the input orthomosaic image and its profile using IO module
        img, profile = IO.load_orthomosaic(self.uav_lineEdit.text(), self.config)

        # Perform prediction on the input image with resampling
        pred, profile = Pred.predict_with_resampling_per_tile(
            img,
            profile,
            model,
            self.config
        )

        # Export the predicted stem map and stems information to GeoJSON
        # (first checkbox)
        stem_dir = os.path.dirname(self.output_lineEdit_stem.text())
        file_name = os.path.splitext(os.path.basename(self.output_lineEdit_stem.text()))[0]
        IO.export_stem_map(pred, profile, stem_dir, file_name)



#/home/mmawad/miniconda3/envs/WINMOL_Analyzer/bin/python.exe
# standalone/WINMOL_Analyzer.py
# /home/mmawad/repos/WINMOL_Analyzer/standalone/model/UNet_SpecDS_UNet_Mask-RCNN_512_Spruce_2_model_2023-02-27_061925.hdf5
# /home/mmawad/repos/WINMOL_Analyzer/standalone/input/test.tiff
# /home/mmawad/repos/WINMOL_Analyzer/standalone/predict/
# /home/mmawad/repos/WINMOL_Analyzer/standalone/output/
